plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.72"
    id "org.jetbrains.kotlin.kapt" version "1.3.72"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.72"
    id "com.diffplug.gradle.spotless" version "4.0.1"

    id "org.flywaydb.flyway" version "6.4.2"

    id "application"
}

version = "1.0.0"
group = "tf.sailor.pixivdl"

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    // == Kotlin == //
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect:")

    // == Web == //
    implementation(enforcedPlatform("io.micronaut:micronaut-bom:2.0.0.M3"))
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut:micronaut-http-server-netty")
    // micronaut's shitty HTTP client can suck my dick and balls
    implementation "com.squareup.okhttp3:okhttp:4.7.2"
    implementation "io.pebbletemplates:pebble:3.1.4"

    // == SQL == //
    implementation("io.micronaut.configuration:micronaut-flyway")
    implementation("io.micronaut.configuration:micronaut-jdbc-hikari")
    implementation("io.micronaut.configuration:micronaut-jooq")
    implementation "org.postgresql:postgresql:42.2.12"
    implementation "org.jooq:jooq-codegen:3.13.1"

    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8"

    // == Logging == //
    implementation(enforcedPlatform("org.apache.logging.log4j:log4j-bom:2.13.3"))
    implementation "org.apache.logging.log4j:log4j-api"
    runtimeOnly "org.apache.logging.log4j:log4j-core"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl"

    // == Logic deps == //
    implementation "commons-codec:commons-codec:1.14"
    implementation "com.github.ben-manes.caffeine:caffeine:2.8.4"
    // https://mvnrepository.com/artifact/io.minio/minio
    implementation "io.minio:minio:7.0.2"


    // == AP == //

    kapt(enforcedPlatform("io.micronaut:micronaut-bom:2.0.0.M3"))
    kapt("io.micronaut:micronaut-inject-java")
    kapt("io.micronaut:micronaut-validation")

}

spotless {
    kotlin {
        targetExclude "build/generated/**"
        ktlint().userData(
            [
                "disabled_rules": "no-wildcard-imports",
                "max_line_length": "100"
            ]
        )
        licenseHeaderFile "$project.rootDir/gradle/LICENCE-HEADER"
    }

    java {
        targetExclude "build/generated/**"
        licenseHeaderFile "$project.rootDir/gradle/LICENCE-HEADER"
    }

    sql {
        target "**/*.sql"
    }
}

flyway {
    url = "jdbc:postgresql://localhost:34125/pixivdl"
    user = "pixivdl"
    password = "pixivdl"

    configurations = ["compileClasspath"]
}

task(jooqGenerate, type: JavaExec) {
    group = "other"

    main = "org.jooq.codegen.GenerationTool"
    args = ["${projectDir}/jooq.xml"]
    classpath = sourceSets.main.runtimeClasspath
    dependsOn "flywayMigrate"
}

test.classpath += configurations.developmentOnly

mainClassName = "pixiv.dl.Application"

allOpen {
    annotation("io.micronaut.aop.Around")
}

// We target Java 13+

compileKotlin {
    kotlinOptions {
        jvmTarget = "13"
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "13"
        javaParameters = true
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_13
}


tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs("-XX:TieredStopAtLevel=1", "-Dcom.sun.management.jmxremote")
}



