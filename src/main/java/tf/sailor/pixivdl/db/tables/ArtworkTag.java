/*
 * This file is generated by jOOQ.
 */
package tf.sailor.pixivdl.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import tf.sailor.pixivdl.db.Indexes;
import tf.sailor.pixivdl.db.Keys;
import tf.sailor.pixivdl.db.Public;
import tf.sailor.pixivdl.db.tables.records.ArtworkTagRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArtworkTag extends TableImpl<ArtworkTagRecord> {

    private static final long serialVersionUID = 1640044031;

    /**
     * The reference instance of <code>public.artwork_tag</code>
     */
    public static final ArtworkTag ARTWORK_TAG = new ArtworkTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArtworkTagRecord> getRecordType() {
        return ArtworkTagRecord.class;
    }

    /**
     * The column <code>public.artwork_tag.artwork_id</code>.
     */
    public final TableField<ArtworkTagRecord, Integer> ARTWORK_ID = createField(DSL.name("artwork_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.artwork_tag.tag_id</code>.
     */
    public final TableField<ArtworkTagRecord, Integer> TAG_ID = createField(DSL.name("tag_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.artwork_tag</code> table reference
     */
    public ArtworkTag() {
        this(DSL.name("artwork_tag"), null);
    }

    /**
     * Create an aliased <code>public.artwork_tag</code> table reference
     */
    public ArtworkTag(String alias) {
        this(DSL.name(alias), ARTWORK_TAG);
    }

    /**
     * Create an aliased <code>public.artwork_tag</code> table reference
     */
    public ArtworkTag(Name alias) {
        this(alias, ARTWORK_TAG);
    }

    private ArtworkTag(Name alias, Table<ArtworkTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private ArtworkTag(Name alias, Table<ArtworkTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ArtworkTag(Table<O> child, ForeignKey<O, ArtworkTagRecord> key) {
        super(child, key, ARTWORK_TAG);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FKEY_ARTWORK_TAG_ARTWORK_IDX, Indexes.FKEY_ARTWORK_TAG_TAG_ID);
    }

    @Override
    public UniqueKey<ArtworkTagRecord> getPrimaryKey() {
        return Keys.ARTWORK_TAG_PKEY;
    }

    @Override
    public List<UniqueKey<ArtworkTagRecord>> getKeys() {
        return Arrays.<UniqueKey<ArtworkTagRecord>>asList(Keys.ARTWORK_TAG_PKEY);
    }

    @Override
    public List<ForeignKey<ArtworkTagRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ArtworkTagRecord, ?>>asList(Keys.ARTWORK_TAG__ARTWORK_TAG_ARTWORK_ID_FKEY, Keys.ARTWORK_TAG__ARTWORK_TAG_TAG_ID_FKEY);
    }

    public Artwork artwork() {
        return new Artwork(this, Keys.ARTWORK_TAG__ARTWORK_TAG_ARTWORK_ID_FKEY);
    }

    public Tag tag() {
        return new Tag(this, Keys.ARTWORK_TAG__ARTWORK_TAG_TAG_ID_FKEY);
    }

    @Override
    public ArtworkTag as(String alias) {
        return new ArtworkTag(DSL.name(alias), this);
    }

    @Override
    public ArtworkTag as(Name alias) {
        return new ArtworkTag(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArtworkTag rename(String name) {
        return new ArtworkTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArtworkTag rename(Name name) {
        return new ArtworkTag(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
